<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-700</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mängulaud
//randomize();

if juust == 0{
    ds_slaud = ds_list_create();
    
    ds_list_add(ds_slaud,"
    AAAAA
    BBBBB
    CCCBB
    DDCCB
    DEEEE
    ");
    
    ds_list_add(ds_slaud,"
    AABBCC
    AABCCC
    AABCCC
    DDBBEE
    DDBBEF
    DDBBFF
    ");
    
    ds_list_add(ds_slaud,"
    ABBBB
    AABCC
    ADDCC
    ADDCC
    AEECC
    ");
    
    ds_list_add(ds_slaud,"
    AAAAB
    CBAAB
    CBBBB
    CBBBD
    CEEDD
    ");
    
    ds_list_shuffle(ds_slaud)
    
    globalvar slaud;
    
    for (u = 0; u &lt; ds_list_size(ds_slaud); u++){
        slaud[u] = string_letters(ds_list_find_value(ds_slaud,u));
    }
    
    ds_list_destroy(ds_slaud);
}


mitm = sqrt(string_length(slaud[juust]));//5 = 5x5 laud jms

//convert
for(i = 0; i &lt; mitm*mitm; i++){
    conv[i] = string_char_at(slaud[juust],i+1);
}

var u = 0;
for(j = 0; j &lt; mitm; j++){
    for(i = 0; i &lt; mitm; i++){
        laud[i,j] = conv[u];
        show_debug_message(laud[i,j]);
        u++;
    }
}

//ini
aar = 400;
uks = aar/mitm;
selecx = 0;
selecy = 0;

/*//ruudustik
for(i = 0; i &lt; mitm*mitm; i++){
ruudustik[i] = 0;
}*/

//ruudustik tähtedele
for(i = 0; i &lt; mitm; i++){
    for(j = 0; j &lt; mitm; j++){
        grid[i,j] = 0;
    }
}

/*for(j = 0; j &lt; mitm; j++){
    for(i = 0; i &lt; mitm; i++){
        show_debug_message(string(laud[i,j]))
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//selec x y
if keyboard_check_pressed(vk_down){
    selecy += 1;
}
if keyboard_check_pressed(vk_up){
    selecy -= 1;
}
if keyboard_check_pressed(vk_left){
    selecx -= 1;
}
if keyboard_check_pressed(vk_right){
    selecx += 1;
}

//selec üle
if selecy &lt; 0{
    selecy = mitm-1;
}
if selecx &lt; 0{
    selecx = mitm-1;
}
if selecy &gt; mitm-1{
    selecy = 0;
}
if selecx &gt; mitm-1{
    selecx = 0;
}

//tähed
if keyboard_check_pressed(vk_space){
    //täht
    if grid[selecx,selecy] == 0{
        grid[selecx,selecy] = 1;
    }else{
        grid[selecx,selecy] = 0;
    }
    //kontroll
    for(i0 = 0; i0 &lt; mitm; i0++){
        for(j0 = 0; j0 &lt; mitm; j0++){
            if grid[i0,j0] &gt; 0{
                grid[i0,j0] = 1;
                sc_kontroll();
            }
        }
    }
    //võit
    if sc_voit(){
        juust++;
        //dmode = false;
        instance_destroy();
    }
}
/*
    //kontroll
    for(i = 0; i &lt; mitm; i++){
        for(j = 0; j &lt; mitm; j++){
            if grid[i,j] &gt; 0{
                for(i = 0; i &lt; mitm; i++){
                    for(j = 0; j &lt; mitm; j++){
                        if grid[i,j] &gt; 0{
                            
                        }
                    }
                }
            }
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//taust
draw_set_colour(make_colour_rgb(254, 240, 191));
draw_rectangle(x,y,x+aar,y+aar,false);
draw_set_colour(make_colour_rgb(55, 27, 3));
draw_rectangle(x,y,x+aar,y+aar,true);

//jooned
for(i = 1; i &lt; mitm; i++){
    draw_line(x+(i*uks),y,x+(i*uks),y+aar);
    draw_line(x,y+(i*uks),x+aar,y+(i*uks));
}

//paksud jooned
//draw_set_colour(c_yellow);
for(j = 0; j &lt; mitm; j++){
    for(i = 0; i &lt; mitm; i++){
        if i &lt; mitm-1 &amp;&amp; laud[i,j] != laud[i+1,j]{
            draw_line_width(x+(i*uks)+uks,y+(j*uks),x+(i*uks)+uks,y+(j*uks)+uks,4);
        }
        if j &lt; mitm-1 &amp;&amp; laud[i,j] != laud[i,j+1]{
            draw_line_width(x+(i*uks),y+(j*uks)+uks,x+(i*uks)+uks,y+(j*uks)+uks,4);
        }
    }
}

//tähed
for(i = 0; i &lt; mitm; i++){
    for(j = 0; j &lt; mitm; j++){
        if grid[i,j] == 1{
            draw_sprite_ext(spr_taht,0,x+(i*uks)+(uks/2),y+(j*uks)+(uks/2),uks/32,uks/32,0,-1,1);
        }else if grid[i,j] == 2{
            draw_sprite_ext(spr_taht,0,x+(i*uks)+(uks/2),y+(j*uks)+(uks/2),uks/32,uks/32,0,c_red,0.5);
        }
    }
}

//selektsioon
draw_set_colour(make_colour_rgb(230, 180, 57));
draw_rectangle(x+(selecx*uks),y+(selecy*uks),x+(selecx*uks)+uks,y+(selecy*uks)+uks,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
